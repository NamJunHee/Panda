# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from symbolic_msgs/ActionResult.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ActionResult(genpy.Message):
  _md5sum = "f7072e87515b1c12d8c225bf21a0bcf4"
  _type = "symbolic_msgs/ActionResult"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 action_id
int32[] objects
int32 result

# action_id
int32 ACTION_MOVE_FREE = 100 # objects = []
int32 ACTION_MOVE_HOLDING = 101 # objects = [holding_object]
int32 ACTION_PICK = 102 # objects = [picked_object]
int32 ACTION_PLACE_ON = 103 # objects = [object_top, object_bottom]
int32 ACTION_PLACE_IN = 104 # objects = [object_inner, object_outer]
int32 ACTION_STACK_IN = 105 # objects = [object_top, object_bottom]

# result
int32 SUCCESS = 1
int32 STATE_UPDATE_REQUIRED = 0
int32 FAILED = -1
"""
  # Pseudo-constants
  ACTION_MOVE_FREE = 100
  ACTION_MOVE_HOLDING = 101
  ACTION_PICK = 102
  ACTION_PLACE_ON = 103
  ACTION_PLACE_IN = 104
  ACTION_STACK_IN = 105
  SUCCESS = 1
  STATE_UPDATE_REQUIRED = 0
  FAILED = -1

  __slots__ = ['action_id','objects','result']
  _slot_types = ['int32','int32[]','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       action_id,objects,result

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ActionResult, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.action_id is None:
        self.action_id = 0
      if self.objects is None:
        self.objects = []
      if self.result is None:
        self.result = 0
    else:
      self.action_id = 0
      self.objects = []
      self.result = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.action_id
      buff.write(_get_struct_i().pack(_x))
      length = len(self.objects)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.objects))
      _x = self.result
      buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (self.action_id,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.objects = s.unpack(str[start:end])
      start = end
      end += 4
      (self.result,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.action_id
      buff.write(_get_struct_i().pack(_x))
      length = len(self.objects)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.objects.tostring())
      _x = self.result
      buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (self.action_id,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.objects = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (self.result,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
