// Generated by gencpp from file symbolic_msgs/perceptionRequest.msg
// DO NOT EDIT!


#ifndef SYMBOLIC_MSGS_MESSAGE_PERCEPTIONREQUEST_H
#define SYMBOLIC_MSGS_MESSAGE_PERCEPTIONREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace symbolic_msgs
{
template <class ContainerAllocator>
struct perceptionRequest_
{
  typedef perceptionRequest_<ContainerAllocator> Type;

  perceptionRequest_()
    : detect_obj(false)
    , place(0)  {
    }
  perceptionRequest_(const ContainerAllocator& _alloc)
    : detect_obj(false)
    , place(0)  {
  (void)_alloc;
    }



   typedef uint8_t _detect_obj_type;
  _detect_obj_type detect_obj;

   typedef int32_t _place_type;
  _place_type place;





  typedef boost::shared_ptr< ::symbolic_msgs::perceptionRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::symbolic_msgs::perceptionRequest_<ContainerAllocator> const> ConstPtr;

}; // struct perceptionRequest_

typedef ::symbolic_msgs::perceptionRequest_<std::allocator<void> > perceptionRequest;

typedef boost::shared_ptr< ::symbolic_msgs::perceptionRequest > perceptionRequestPtr;
typedef boost::shared_ptr< ::symbolic_msgs::perceptionRequest const> perceptionRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::symbolic_msgs::perceptionRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::symbolic_msgs::perceptionRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::symbolic_msgs::perceptionRequest_<ContainerAllocator1> & lhs, const ::symbolic_msgs::perceptionRequest_<ContainerAllocator2> & rhs)
{
  return lhs.detect_obj == rhs.detect_obj &&
    lhs.place == rhs.place;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::symbolic_msgs::perceptionRequest_<ContainerAllocator1> & lhs, const ::symbolic_msgs::perceptionRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace symbolic_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::symbolic_msgs::perceptionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::symbolic_msgs::perceptionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::symbolic_msgs::perceptionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::symbolic_msgs::perceptionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::symbolic_msgs::perceptionRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::symbolic_msgs::perceptionRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::symbolic_msgs::perceptionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a56b4c511424086489b1c3d34bfcfd4f";
  }

  static const char* value(const ::symbolic_msgs::perceptionRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa56b4c5114240864ULL;
  static const uint64_t static_value2 = 0x89b1c3d34bfcfd4fULL;
};

template<class ContainerAllocator>
struct DataType< ::symbolic_msgs::perceptionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "symbolic_msgs/perceptionRequest";
  }

  static const char* value(const ::symbolic_msgs::perceptionRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::symbolic_msgs::perceptionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# request\n"
"bool detect_obj\n"
"int32 place\n"
;
  }

  static const char* value(const ::symbolic_msgs::perceptionRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::symbolic_msgs::perceptionRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.detect_obj);
      stream.next(m.place);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct perceptionRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::symbolic_msgs::perceptionRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::symbolic_msgs::perceptionRequest_<ContainerAllocator>& v)
  {
    s << indent << "detect_obj: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.detect_obj);
    s << indent << "place: ";
    Printer<int32_t>::stream(s, indent + "  ", v.place);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SYMBOLIC_MSGS_MESSAGE_PERCEPTIONREQUEST_H
