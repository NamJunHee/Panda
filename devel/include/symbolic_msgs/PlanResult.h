// Generated by gencpp from file symbolic_msgs/PlanResult.msg
// DO NOT EDIT!


#ifndef SYMBOLIC_MSGS_MESSAGE_PLANRESULT_H
#define SYMBOLIC_MSGS_MESSAGE_PLANRESULT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace symbolic_msgs
{
template <class ContainerAllocator>
struct PlanResult_
{
  typedef PlanResult_<ContainerAllocator> Type;

  PlanResult_()
    : task_id(0)
    , plan()
    , result(0)  {
    }
  PlanResult_(const ContainerAllocator& _alloc)
    : task_id(0)
    , plan(_alloc)
    , result(0)  {
  (void)_alloc;
    }



   typedef int32_t _task_id_type;
  _task_id_type task_id;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _plan_type;
  _plan_type plan;

   typedef int32_t _result_type;
  _result_type result;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(SUCCESS)
  #undef SUCCESS
#endif
#if defined(_WIN32) && defined(FAILED)
  #undef FAILED
#endif

  enum {
    SUCCESS = 1,
    FAILED = -1,
  };


  typedef boost::shared_ptr< ::symbolic_msgs::PlanResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::symbolic_msgs::PlanResult_<ContainerAllocator> const> ConstPtr;

}; // struct PlanResult_

typedef ::symbolic_msgs::PlanResult_<std::allocator<void> > PlanResult;

typedef boost::shared_ptr< ::symbolic_msgs::PlanResult > PlanResultPtr;
typedef boost::shared_ptr< ::symbolic_msgs::PlanResult const> PlanResultConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::symbolic_msgs::PlanResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::symbolic_msgs::PlanResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::symbolic_msgs::PlanResult_<ContainerAllocator1> & lhs, const ::symbolic_msgs::PlanResult_<ContainerAllocator2> & rhs)
{
  return lhs.task_id == rhs.task_id &&
    lhs.plan == rhs.plan &&
    lhs.result == rhs.result;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::symbolic_msgs::PlanResult_<ContainerAllocator1> & lhs, const ::symbolic_msgs::PlanResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace symbolic_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::symbolic_msgs::PlanResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::symbolic_msgs::PlanResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::symbolic_msgs::PlanResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::symbolic_msgs::PlanResult_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::symbolic_msgs::PlanResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::symbolic_msgs::PlanResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::symbolic_msgs::PlanResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "38cc8a1052b509b68d15938d07f568f0";
  }

  static const char* value(const ::symbolic_msgs::PlanResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x38cc8a1052b509b6ULL;
  static const uint64_t static_value2 = 0x8d15938d07f568f0ULL;
};

template<class ContainerAllocator>
struct DataType< ::symbolic_msgs::PlanResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "symbolic_msgs/PlanResult";
  }

  static const char* value(const ::symbolic_msgs::PlanResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::symbolic_msgs::PlanResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 task_id\n"
"string[] plan\n"
"int32 result\n"
"\n"
"# result\n"
"int32 SUCCESS = 1\n"
"int32 FAILED = -1\n"
;
  }

  static const char* value(const ::symbolic_msgs::PlanResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::symbolic_msgs::PlanResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.task_id);
      stream.next(m.plan);
      stream.next(m.result);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PlanResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::symbolic_msgs::PlanResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::symbolic_msgs::PlanResult_<ContainerAllocator>& v)
  {
    s << indent << "task_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.task_id);
    s << indent << "plan[]" << std::endl;
    for (size_t i = 0; i < v.plan.size(); ++i)
    {
      s << indent << "  plan[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.plan[i]);
    }
    s << indent << "result: ";
    Printer<int32_t>::stream(s, indent + "  ", v.result);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SYMBOLIC_MSGS_MESSAGE_PLANRESULT_H
