// Generated by gencpp from file symbolic_msgs/ActionResult.msg
// DO NOT EDIT!


#ifndef SYMBOLIC_MSGS_MESSAGE_ACTIONRESULT_H
#define SYMBOLIC_MSGS_MESSAGE_ACTIONRESULT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace symbolic_msgs
{
template <class ContainerAllocator>
struct ActionResult_
{
  typedef ActionResult_<ContainerAllocator> Type;

  ActionResult_()
    : action_id(0)
    , objects()
    , result(0)  {
    }
  ActionResult_(const ContainerAllocator& _alloc)
    : action_id(0)
    , objects(_alloc)
    , result(0)  {
  (void)_alloc;
    }



   typedef int32_t _action_id_type;
  _action_id_type action_id;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _objects_type;
  _objects_type objects;

   typedef int32_t _result_type;
  _result_type result;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(ACTION_MOVE_FREE)
  #undef ACTION_MOVE_FREE
#endif
#if defined(_WIN32) && defined(ACTION_MOVE_HOLDING)
  #undef ACTION_MOVE_HOLDING
#endif
#if defined(_WIN32) && defined(ACTION_PICK)
  #undef ACTION_PICK
#endif
#if defined(_WIN32) && defined(ACTION_PLACE_ON)
  #undef ACTION_PLACE_ON
#endif
#if defined(_WIN32) && defined(ACTION_PLACE_IN)
  #undef ACTION_PLACE_IN
#endif
#if defined(_WIN32) && defined(ACTION_STACK_IN)
  #undef ACTION_STACK_IN
#endif
#if defined(_WIN32) && defined(SUCCESS)
  #undef SUCCESS
#endif
#if defined(_WIN32) && defined(STATE_UPDATE_REQUIRED)
  #undef STATE_UPDATE_REQUIRED
#endif
#if defined(_WIN32) && defined(FAILED)
  #undef FAILED
#endif

  enum {
    ACTION_MOVE_FREE = 100,
    ACTION_MOVE_HOLDING = 101,
    ACTION_PICK = 102,
    ACTION_PLACE_ON = 103,
    ACTION_PLACE_IN = 104,
    ACTION_STACK_IN = 105,
    SUCCESS = 1,
    STATE_UPDATE_REQUIRED = 0,
    FAILED = -1,
  };


  typedef boost::shared_ptr< ::symbolic_msgs::ActionResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::symbolic_msgs::ActionResult_<ContainerAllocator> const> ConstPtr;

}; // struct ActionResult_

typedef ::symbolic_msgs::ActionResult_<std::allocator<void> > ActionResult;

typedef boost::shared_ptr< ::symbolic_msgs::ActionResult > ActionResultPtr;
typedef boost::shared_ptr< ::symbolic_msgs::ActionResult const> ActionResultConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::symbolic_msgs::ActionResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::symbolic_msgs::ActionResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::symbolic_msgs::ActionResult_<ContainerAllocator1> & lhs, const ::symbolic_msgs::ActionResult_<ContainerAllocator2> & rhs)
{
  return lhs.action_id == rhs.action_id &&
    lhs.objects == rhs.objects &&
    lhs.result == rhs.result;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::symbolic_msgs::ActionResult_<ContainerAllocator1> & lhs, const ::symbolic_msgs::ActionResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace symbolic_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::symbolic_msgs::ActionResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::symbolic_msgs::ActionResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::symbolic_msgs::ActionResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::symbolic_msgs::ActionResult_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::symbolic_msgs::ActionResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::symbolic_msgs::ActionResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::symbolic_msgs::ActionResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f7072e87515b1c12d8c225bf21a0bcf4";
  }

  static const char* value(const ::symbolic_msgs::ActionResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf7072e87515b1c12ULL;
  static const uint64_t static_value2 = 0xd8c225bf21a0bcf4ULL;
};

template<class ContainerAllocator>
struct DataType< ::symbolic_msgs::ActionResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "symbolic_msgs/ActionResult";
  }

  static const char* value(const ::symbolic_msgs::ActionResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::symbolic_msgs::ActionResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 action_id\n"
"int32[] objects\n"
"int32 result\n"
"\n"
"# action_id\n"
"int32 ACTION_MOVE_FREE = 100 # objects = []\n"
"int32 ACTION_MOVE_HOLDING = 101 # objects = [holding_object]\n"
"int32 ACTION_PICK = 102 # objects = [picked_object]\n"
"int32 ACTION_PLACE_ON = 103 # objects = [object_top, object_bottom]\n"
"int32 ACTION_PLACE_IN = 104 # objects = [object_inner, object_outer]\n"
"int32 ACTION_STACK_IN = 105 # objects = [object_top, object_bottom]\n"
"\n"
"# result\n"
"int32 SUCCESS = 1\n"
"int32 STATE_UPDATE_REQUIRED = 0\n"
"int32 FAILED = -1\n"
;
  }

  static const char* value(const ::symbolic_msgs::ActionResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::symbolic_msgs::ActionResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.action_id);
      stream.next(m.objects);
      stream.next(m.result);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ActionResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::symbolic_msgs::ActionResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::symbolic_msgs::ActionResult_<ContainerAllocator>& v)
  {
    s << indent << "action_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.action_id);
    s << indent << "objects[]" << std::endl;
    for (size_t i = 0; i < v.objects.size(); ++i)
    {
      s << indent << "  objects[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.objects[i]);
    }
    s << indent << "result: ";
    Printer<int32_t>::stream(s, indent + "  ", v.result);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SYMBOLIC_MSGS_MESSAGE_ACTIONRESULT_H
